Each line is a rule, which is made up of two strings of symbols separated by , the left hand side or lhs and right hand side or rhs. These symbols can be terminals which appear in the language such as , , x, 0 and so on in our example or nonterminals which do not such as TERM. These rules are used as follows We start with a string S containing a dis tinguished start symbol here EXPR. We then iterate the following process choose a rule whose lhs occurs in S, and apply it by substituting one occurrence of this lhs in S with the rhs. Every string S which can be obtained by a finite sequence of these operations is considered grammatical, and by keeping track 31 EXPR TERM EXPR 17 EXPR EXPR EXPR TERM TERM VALUE TERM TERM EXPR TERM VALUE VALUE x VALUE y VALUE 1 Figure 3 A grammar for arithmetic expressions. of the rule applications we get a parse tree. This is a graph whose nodes are symbols and whose edges connect a symbol which appears on the lhs of a rule application with the nodes for each of the symbols which appear on the rhs.42 A good exercise is to work out the parse tree for the expression y 1 x and check that multiplication takes precedence over addition. Our example of a grammar is a contextfree grammar, meaning that the left hand side of each rule consists of a single symbol. If we do not put this restriction, the resulting class of languages are universal computers and thus suffer from potential undecidability. There is also a more restricted class of grammars called regular grammars this hierarchy was found by Chomsky, but these cannot describe nested structures such as the parentheses of Eq. 17. The contextfree grammars are the right degree of complexity for many purposes. In particular, programming languages and the formal languages of mathematical logic can be described using CFGs and thus the algorithms for working with them and associated theory are well developed. Besides recognizing and parsing languages, one can describe other linguistic tasks in similar terms. A trivial example would be word replacement, with rules such as OLDi NEWi. Realistic tasks benefit from frameworks with more structure. For example, to use the grammar in Eq. 17 to do arithmetic, we would be much better off with a framework in which the token VALUE carries an associated numerical or symbolic value. This can be done with the framework of attribute grammars. When we suggest in 8 that LLMs perform natural language tasks using systems of large numbers of rules, we have this sort of extended grammatical framework in mind. CFGs are not really adequate for natural languages, with their inherent ambiguity and their many special cases and exceptions. A more general for malism is the probabilistic CFG. This is obtained by associating a probability distribution to each symbol which appears on the left hand side of a rule the nonterminals.